# Design principles
- Identify the aspects of your application that vary and separate them from what stays the same. Encapsulate what varies. 
- Program to an interface, not an implementation
- Favor composition over inheritance
- Strive for loosely coupled designs between objects that interact.
- Classes should be open for extension, but closed for modification.
- Depend upon abstractions. Do not depend upon concrete classes.
    - No variable should hold a reference to a concrete class.
    - No class should derive from a concrete class. 
    - No method should override an implemented method of any of its base classes.

# (B)The Strategy Pattern
- Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
- Strategy lets the algorithm vary independently from clients that use it. 

# (B)The Observer Pattern
- Defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.
- One Subject, Many Observers.

# (S)The Decorator Pattern
- Attaches additional responsibilities to an object dinamically.
- Decorators provide a flexible alternative to subclassing for extending functionality.

# (C) The Factory Method Pattern
- Defines an interface for creating an object, but lets subclasses decide which class to instantiate.
- Factory Method lets a class defer instantiation to subclasses.

# (C) The Abstract Factory Pattern
- Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

# The Singleton Pattern
- Ensures a class has only one instance, and provides a global point of access to it.

# The Command Pattern
- Encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.

# The Adapter Pattern
# The Facade Pattern
# The Template Method Pattern
# The Iterator Pattern
# The Composite Pattern
# The State Pattern
# The Proxy Pattern
# MVC
# Bridge
# Builder
# Chain of Responsability
# Flyweight
# Interpreter
# Mediator
# Memento
# Prototype
# Visitor
